#!/usr/bin/env python3
import re
import click
import yaml
import os
import subprocess
import glob

class MakeDocs():

    def __init__(self,infofile):
        self.readOptions(infofile)
        self.docdir = "../" + self._get("doc.dest",self.options)

        if(not os.path.exists(self.docdir)):
            os.mkdir(self.docdir)

        self.header = """---
layout: page
title: {title}
---

"""

    def _get(self,path,data=None):
        #print(path,data)
        if(data is None):
            return None
        if("." in path):
            arr = path.split(".")
            ndata = self._get(arr[0],data)
            #print(arr[0])
            return self._get(".".join(arr[1:]),ndata)
        elif(path in data):
            return data[path]
        else:
            print(f"Warning: Could not find {path} in {data} ")
            return None


    def doCmdWithReturn(self,cmd):
        result = subprocess.getoutput(cmd)

        return result

    def readOptions(self,infofile):
        self.infofile = infofile
        self.options = None
        if(os.path.exists(infofile)):
            with open(infofile) as fi:
                self.options = yaml.safe_load(fi)

        if(self.options is None):
            raise Exception(f"Error: Could not read {infofile}")

    def makeInstall(self):
        installfile = self.docdir + os.path.sep + "install.md"

        dirname = self.options["library"].lower()
        with open(installfile,"w") as fo:
            fo.write(self.header.replace("{title}","Install"))
            fo.write(f"# Clone " + self.options["library"] + "\n\n")
            fo.write("To install, do the following\n\n")
            fo.write("```bash\n")
            fo.write("python3 -m pip install cicconf\n")
            remote = self.doCmdWithReturn("git  remote -v |grep fetch|awk '{print $2}'")
            fo.write(f"git clone --recursive {remote} {dirname}\n")
            fo.write(f"cicconf --rundir ./ --config {dirname}/config.yaml clone --https\n")
            fo.write("```\n")

        pass

    def makeOneSchematic(self,cellpath):

        cell = os.path.basename(cellpath)
        sch = cellpath + ".sch"
        shortpath = cellpath.replace("../design/","")
        svg =  shortpath + ".svg"
        pathsvg =  self.docdir + os.path.sep +  shortpath + ".svg"

        md = cellpath + ".md"
        self.doCmdWithReturn(f'xschem --preinit "set dark_colorscheme 0" -x -q -p --svg {sch}')
        dpath = os.path.dirname(pathsvg)
        if(not os.path.exists(dpath)):
            os.makedirs(dpath)


        os.system(f"cp plot.svg {pathsvg} ")
        mdbuff = ""
        if(os.path.exists(md)):
            with open(md) as fi:
                mdbuff = fi.read()

        buff = f"""### {cell}
{mdbuff}

 ![]({svg})

\n"""
        return buff
        pass
    
    def makeSchematics(self):

        libraries = self._get("doc.libraries",self.options)
        if(libraries is None):
            return


        buff = self.header.replace("{title}","Schematics")

        buff += """
* TOC
{:toc }
\n\n"""
        #- Check for Markdowns
        for lib in libraries:
            cells = libraries[lib]
            buff += f"## {lib}\n\n"
            mark = glob.glob(f"../design/{lib}/*.md")
            if(len(cells) > 0):
                for c in cells:
                    buff += self.makeOneSchematic(f"../design/{lib}/{c}")
            #- No markdowns, write all schematics
            elif(len(mark) == 0):
                sch = glob.glob(f"../design/{lib}/*.sch")
                for s in sch:
                    buff += self.makeOneSchematic(s.replace(".sch",""))
            else:
                for s in mark:
                    buff += self.makeOneSchematic(s.replace(".md",""))

        with open(self.docdir + os.path.sep + "schematic.md","w") as fo:
            fo.write(buff)


        pass

    def run(self):

        self.makeInstall()
        self.makeSchematics()

        pass

@click.command()
@click.option("--info",default="../info.yaml",help="Default info file")
def cli(info):
    c = MakeDocs(info)
    c.run()







if(__name__ == "__main__"):
    cli()
